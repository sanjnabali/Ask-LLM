services:
  - type: web
    name: document-analysis-system
    env: python
    plan: starter  # Changed from free for better performance
    
    # Updated build command for Python 3.12.4 compatibility
    buildCommand: |
      # Debug: Show current directory and files
      echo "Current directory: $(pwd)"
      echo "Files in current directory:"
      ls -la
      echo "Files in scripts directory (if exists):"
      ls -la scripts/ || echo "No scripts directory found"
      
      # Set Python version
      python --version
      
      # Update system packages
      apt-get update && apt-get install -y \
        build-essential \
        libffi-dev \
        libssl-dev \
        python3-dev \
        pkg-config \
        libmupdf-dev \
        libjpeg-dev \
        zlib1g-dev \
        cmake \
        gcc \
        g++
      
      # Upgrade Python packaging tools
      pip install --upgrade pip setuptools wheel
      
      # Set Rust/Cargo environment for tokenizers
      export CARGO_HOME=/tmp/.cargo
      export CARGO_TARGET_DIR=/tmp/.cargo-target
      
      # CRITICAL: Ensure main.py exists in root directory
      if [ -f "scripts/main.py" ]; then
        echo "Copying main.py from scripts/ to root directory..."
        cp scripts/main.py ./main.py
        echo "main.py copied successfully"
      elif [ -f "main.py" ]; then
        echo "main.py already exists in root directory"
      else
        echo "ERROR: main.py not found in scripts/ or root directory!"
        echo "Available files:"
        find . -name "*.py" -type f
        exit 1
      fi
      
      # Verify main.py exists and is readable
      if [ -f "main.py" ]; then
        echo "✅ main.py exists in root directory"
        echo "File size: $(wc -c < main.py) bytes"
        echo "First few lines of main.py:"
        head -n 5 main.py
      else
        echo "❌ main.py still not found in root directory"
        exit 1
      fi
      
      # Install dependencies with specific order for compatibility
      pip install --no-cache-dir torch==2.5.1 --index-url https://download.pytorch.org/whl/cpu
      pip install --no-cache-dir numpy==2.1.3
      pip install --no-cache-dir -r requirements.txt
      
      # Verify critical imports
      python -c "import torch; print('PyTorch:', torch.__version__)"
      python -c "import numpy; print('NumPy:', numpy.__version__)"
      python -c "import sentence_transformers; print('SentenceTransformers: OK')" || echo "SentenceTransformers: Will use fallback"
      
      # Final verification that main.py can be imported
      echo "Testing main.py import..."
      python -c "import main; print('✅ main.py imports successfully')" || echo "❌ main.py import failed"
    
    # Fixed start command - main.py is now in root directory
    startCommand: uvicorn main:app --host 0.0.0.0 --port 10000
    
    # Environment variables
    envVars:
      - key: PYTHON_VERSION
        value: 3.12.4
      
      # API Keys (set these in Render dashboard)
      - key: GEMINI_API_KEY
        sync: false
      
      - key: PINECONE_API_KEY
        sync: false
      
      # Pinecone configuration
      - key: PINECONE_ENVIRONMENT
        value: us-east-1-aws
      
      - key: INDEX_NAME
        value: askllm
      
      # Server configuration
      - key: PORT
        value: 10000
      
      # Build optimization for Python 3.12
      - key: PYTHONUNBUFFERED
        value: "1"
      
      - key: PYTHONDONTWRITEBYTECODE
        value: "1"
      
      # Rust/Cargo cache directories for tokenizers compilation
      - key: CARGO_HOME
        value: /tmp/.cargo
      
      - key: CARGO_TARGET_DIR
        value: /tmp/.cargo-target
      
      # PyTorch configuration for CPU-only deployment
      - key: TORCH_CUDA_ARCH_LIST
        value: ""
      
      - key: CUDA_VISIBLE_DEVICES
        value: ""
      
      # Memory optimization
      - key: MALLOC_ARENA_MAX
        value: "2"
      
      # Tokenizers parallelism (disable to avoid warnings)
      - key: TOKENIZERS_PARALLELISM
        value: "false"
    
    # Health check configuration
    healthCheckPath: /health
    
    # Auto-deploy settings
    autoDeploy: true
    
    # Build timeout (extended for Python 3.12 compilation)
    buildTimeout: 30m